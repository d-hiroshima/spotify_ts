import { SpotifyApiClient } from '@/infrastructure/external-services/SpotifyApiClient'
import { IPlayHistoryRepository } from '@/domain/repositories/IPlayHistoryRepository'
import { ITrackRepository } from '@/domain/repositories/ITrackRepository'
import { PlayHistory } from '@/domain/entities/PlayHistory'
import { Track } from '@/domain/entities/Track'
import { UserId } from '@/domain/value-objects/UserId'
import { TrackId } from '@/domain/value-objects/TrackId'
import { ListeningDuration } from '@/domain/value-objects/ListeningDuration'

export class SyncPlayHistory {
  constructor(
    private readonly spotifyClient: SpotifyApiClient,
    private readonly playHistoryRepository: IPlayHistoryRepository,
    private readonly trackRepository: ITrackRepository
  ) {}

  async execute(userId: string): Promise<{ syncedCount: number }> {
    const userIdVO = new UserId(userId)
    
    // Get last synced date
    const lastPlayedAt = await this.playHistoryRepository.getLastPlayedAt(userIdVO)
    
    // Fetch recent tracks from Spotify
    const recentlyPlayed = await this.spotifyClient.getRecentlyPlayed(userId, 50)
    
    // Filter out already synced tracks
    const newItems = lastPlayedAt
      ? recentlyPlayed.items.filter(
          item => new Date(item.played_at) > lastPlayedAt
        )
      : recentlyPlayed.items

    if (newItems.length === 0) {
      return { syncedCount: 0 }
    }

    // Save tracks
    const tracks = newItems.map(item => {
      const track = item.track
      return new Track(
        new TrackId(track.id),
        track.name,
        track.artists.map(a => ({ id: a.id, name: a.name })),
        {
          id: track.album.id,
          name: track.album.name,
          imageUrl: track.album.images[0]?.url
        },
        track.duration_ms,
        track.popularity || null,
        null // Audio features will be fetched separately if needed
      )
    })

    await this.trackRepository.saveMany(tracks)

    // Save play history
    const playHistories = newItems.map(item => {
      const track = item.track
      return new PlayHistory(
        '', // ID will be generated by database
        userIdVO,
        new TrackId(track.id),
        track.name,
        track.artists.map(a => a.name).join(', '),
        track.album.name,
        new Date(item.played_at),
        ListeningDuration.fromMilliseconds(track.duration_ms)
      )
    })

    await this.playHistoryRepository.saveMany(playHistories)

    return { syncedCount: newItems.length }
  }
}